{- 
  TASK 3 - Find and replace binary substring
  Binary string is represented as a cell linked list: string splitted to chunks,
  first chunk stored to the root cell, next one to the cell in ref and so on;
  each cell can have only one ref. 
  Write the method that find and replaces one flags in the binary string
  with another value. Flags and values can be can be of any length, but
  strictly up to 128 bits. The method must replace every flag it finds.
  Flag and the value to be replaced is guaranteed to be greater than 0.
  Lets give a simple example. We have the target flag 101110101 and the value
  to be written 111111111 as inputs, and a linked list of cells, in which the bit
  value of the first cell ends with ...10100001011, and in the ref we have cell that
  starts with 10101000111111...
  The output should be a linked list where the first
  cell ends with ...10100001111, and the second cell starts with 11111000111111...

-}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
forall X -> (tuple, X) list_next(tuple list) asm( -> 1 0) "UNCONS";
forall X -> int is_null (X x) asm "ISNULL";

() recv_internal() {
}

(int) log2(int x) asm "UBITSIZE DEC";

(cell, int) int_to_string(int number) method_id {
  int number_of_bits = log2(number) + 1;
  builder string = begin_cell();

  string~store_uint(number, number_of_bits);

  cell result = string.end_cell();
  return (result, number_of_bits);
}

int are_cells_equal?(cell a, cell b) {
    return a.cell_hash() == b.cell_hash();
}

(tuple, int) store_full_linked_list(cell linked_list){
  tuple full_linked_list = null();

  int length = 0;

  full_linked_list~push_back(linked_list);


  slice current_cell_slice = linked_list.begin_parse();


  length += slice_bits(current_cell_slice);

  repeat (current_cell_slice.slice_refs()){
      cell next_cell = current_cell_slice~load_ref();

      full_linked_list~push_back(next_cell);

      current_cell_slice = next_cell.begin_parse();

      length += slice_bits(current_cell_slice);
  }

  return (full_linked_list, length);
}


tuple reverse_tuple(tuple t) impure {
  tuple r = null();

  while (~ t.is_null()){
    r~push_back(t~pop_back());
  }

  return r;
}


int atc(tuple full_cell_list, int index) impure {
  int i = 0;
  while (~ full_cell_list.is_null()){
    slice current_cell_slice = full_cell_list~pop_back().begin_parse();

    repeat (slice_bits(current_cell_slice)) {
      if (i == index) {
        return current_cell_slice~load_uint(1);
      }
      current_cell_slice~load_uint(1);
      i += 1;
    }
  }

  return -1;
}

;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
  (cell flag_cell, int flag_number_of_bits) = int_to_string(flag);
  (cell value_cell, int value_number_of_bits) = int_to_string(value);
  (tuple full_linked_list, int full_length) = store_full_linked_list(linked_list);

  full_linked_list = full_linked_list.reverse_tuple();

  tuple result = null();
  int i = 0;
  while (i < full_length - value_number_of_bits + 1) {
    int j = i;

    builder current_sub_string = begin_cell(); 
    

    repeat (flag_number_of_bits) {
      current_sub_string~store_uint(full_linked_list.atc(j), 1);
      j = j + 1;
    }


    cell new_cell = current_sub_string.end_cell();

    slice new_cell_slice = new_cell.begin_parse();

    if (are_cells_equal?(new_cell, flag_cell)) {
      result~push_back(i);
      i += flag_number_of_bits - 1;
    }

    i += 1;
  }

  return begin_cell().store_uint(flag, flag_number_of_bits).store_uint(value, flag_number_of_bits).store_ref(linked_list).end_cell();
}